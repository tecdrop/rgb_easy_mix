import 'package:flutter/material.dart';

import '../utils/color_utils.dart' as color_utils;

/// The RGB Sliders Screen stateful widget.
class RGBSliders extends StatefulWidget {
  const RGBSliders({
    super.key,
    required this.initialColor,
    required this.onColorChanged,
  });

  /// The initial color to apply to the RGB sliders.
  final Color initialColor;

  /// Called when the color is changed by the user using the RGB sliders.
  final ValueChanged<Color>? onColorChanged;

  @override
  State<RGBSliders> createState() => _RGBSlidersState();
}

/// RGB channel enumeration.
enum _RGB { red, green, blue }

class _RGBSlidersState extends State<RGBSliders> {
  /// The current color generated by the user using RGB sliders.
  late Color _color;

  /// Apply the initial color to the RGB sliders.
  @override
  void initState() {
    _color = widget.initialColor;
    super.initState();
  }

  void _onColorChanged(Color color) {
    setState(() {
      _color = color;
      widget.onColorChanged?.call(color);
    });
  }

  /// The main build method of the screen.
  @override
  Widget build(BuildContext context) {
    return SliderTheme(
      data: const SliderThemeData(
        trackHeight: 1,
      ),
      child: Table(
        defaultVerticalAlignment: TableCellVerticalAlignment.middle,
        columnWidths: const <int, TableColumnWidth>{
          0: FlexColumnWidth(),
          1: FixedColumnWidth(48.0),
        },
        children: <TableRow>[
          TableRow(
            children: <Widget>[
              _RGBSlider(rgb: _RGB.red, color: _color, onChanged: _onColorChanged),
            ],
          ),
          TableRow(
            children: <Widget>[
              _RGBSlider(rgb: _RGB.green, color: _color, onChanged: _onColorChanged),
            ],
          ),
          TableRow(
            children: <Widget>[
              _RGBSlider(rgb: _RGB.blue, color: _color, onChanged: _onColorChanged),
            ],
          ),
        ],
      ),
    );
  }
}

/// A slider that controls a single RGB channel of a color.
class _RGBSlider extends StatelessWidget {
  const _RGBSlider({
    super.key, // ignore: unused_element
    required this.rgb,
    required this.color,
    this.onChanged,
  });

  /// The RGB channel to control.
  final _RGB rgb;

  /// The color to control.
  final Color color;

  /// Called when the value of the slider changes.
  final void Function(Color)? onChanged;

  /// A map of RGB channels to their corresponding colors.
  static const Map<_RGB, Color> _rgbColors = <_RGB, Color>{
    _RGB.red: Color(0xFFFF0000),
    _RGB.green: Color(0xFF00FF00),
    _RGB.blue: Color(0xFF0000FF),
  };

  /// Returns the value of the specified RGB channel of the specified color.
  static double _getColorRGB(Color color, _RGB rgb) {
    return switch (rgb) {
      _RGB.red => color.red,
      _RGB.green => color.green,
      _RGB.blue => color.blue,
    }
        .toDouble();
  }

  /// Returns the specified color after updating the specified RGB channel with the specified value.
  static Color _updateColor(Color color, _RGB rgb, double value) {
    final int intValue = value.toInt();
    return switch (rgb) {
      _RGB.red => color.withRed(intValue),
      _RGB.green => color.withGreen(intValue),
      _RGB.blue => color.withBlue(intValue),
    };
  }

  @override
  Widget build(BuildContext context) {
    final Color contrastColor = color_utils.contrastOf(color);

    return Slider(
      value: _getColorRGB(color, rgb),
      min: 0,
      max: 255,
      activeColor: contrastColor,
      inactiveColor: contrastColor,
      thumbColor: _rgbColors[rgb],
      onChanged: (double value) => onChanged?.call(_updateColor(color, rgb, value)),
    );
  }
}
